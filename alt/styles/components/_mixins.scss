////////////////////////////////////////
//////////////////////////////////////// Funciones
////////////////////////////////////////
@function strip-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}

	@return $number;
}

@function get-color( $type, $shade ){
	@return map-get(map-get($colors_map, $type), $shade);
}



////////////////////////////////////////
//////////////////////////////////////// Utilitarios
////////////////////////////////////////
@mixin image-replacement {
	font-size: 0;
	line-height: 0;
	color: transparent;
	font-family: a;
}

@mixin reset-appearance {
	-webkit-appearance: none;
	-ms-appearance: none;
	appearance: none;
	background: transparent;
	border-radius: 0;
	line-height: 1;
	border: 0;
	outline: 0;
	padding: 0;
}

@mixin remove-select-arrow {
	text-indent: 0.01px;
	text-overflow: '';
	&::-ms-expand { display: none; }
}

@mixin placeholder {
	&::-webkit-input-placeholder { @content; }
	&::-moz-placeholder { @content; }
	&::-ms-input-placeholder { @content; }
}

@mixin range-track {
	&::-webkit-slider-runnable-track { @content; }
	&::-moz-range-track { @content; }
	&::-ms-track { @content; }
}

@mixin range-thumb {
	&::-webkit-slider-thumb { @content; }
	&::-moz-range-thumb{ @content; }
	&::-ms-thumb { @content; }
}

@mixin table{
	margin: $size_half 0;
	th{
		background-color: $color_grey_lightest !important;
		color: $color_grey_darker !important;
		font-weight: $weight_bold !important;
		@include media (tablet-down){
			min-width: 10rem !important;
		}
	}
	th, tr, td, thead, tbody{
		border: none !important;
	}
	th, td{
		padding: 1rem !important;
		font-size: $size_short !important;
	}
	tbody{
		tr, td{
			font-weight: $weight_light !important;
		}
		tr:nth-child(even){
			background-color: $color_grey_lightest !important;
		}
		tr:nth-child(odd){
			background-color: $color_white !important;
		}
	}
}

////////////////////////
///default transition///
////////////////////////
@mixin transitional{
	@include ease-transition(.4s);
}
@mixin relax{
	@include ease-transition(1s);
}
@mixin divider-btm{
	border-bottom: 1px solid $color_grey_light;
}
@mixin ease-transition($secs){
	-webkit-transition: ease $secs;
    -ms-transition: ease $secs;
	-moz-transition: ease $secs;
    transition: ease $secs;
}
@mixin rotate-y($howmuch){
	-webkit-transform: rotateY($howmuch);
    -ms-transform: rotateY($howmuch);
	-moz-transform: rotateY($howmuch);
    transform: rotateY($howmuch);
}
@mixin rotate-x($howmuch){
	-webkit-transform: rotateX($howmuch);
    -ms-transform: rotateX($howmuch);
	-moz-transform: rotateX($howmuch);
    transform: rotateX($howmuch);
}
@mixin scale{
	-webkit-transform: scale(1.025);
    -ms-transform: scale(1.025);
	-moz-transform: scale(1.025);
    transform: scale(1.025);
}
@mixin scaleme($x){
	-webkit-transform: scale($x);
    -ms-transform: scale($x);
	-moz-transform: scale($x);
    transform: scale($x);
}
@mixin overland{
	position: absolute;
    width: 100%;
    height: 100%;
    bottom: 0;
    left: 0;
	background: rgba($color_ciper_black, .25);
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    padding: $size_avg;
}
@mixin overthumb{
	position: absolute;
    width: 100%;
    bottom: 0;
    left: 0;
	background: rgba($color_ciper_black, 1);
    display: flex;
    padding: $size_regular;
}
@mixin relathumb{
	position: relative;
    width: 100%;
	background: rgba($color_ciper_black, 1);
    display: flex;
    padding: $size_regular;
}
@mixin border-shadow{
	content: "";
    position: absolute;
    width: 98%;
    right: 1%;
    bottom: 0;
    height: 20px;
    // z-index:-1;
    -moz-box-shadow: inset 1px -10px 2px -10px $color_ciper_gray;
    -webkit-box-shadow: inset 1px -10px 2px -10px $color_ciper_gray;
    box-shadow: inset 1px -10px 2px -10px $color_ciper_gray;
}
@mixin overlay($color, $alpha){
	&:after{
		content: '';
		position: absolute;
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		background: rgba($color, $alpha);
		z-index: -1;
	}
}
@mixin flex-column(){
	display: flex;
	flex-direction: column;
}
@mixin flex-row(){
	display: flex;
	flex-direction: row;
}
@mixin flex-fill(){
	@include flex-column;
	align-content: stretch;
}
////////////////////////////////////////
//////////////////////////////////////// Media/Element Queries
////////////////////////////////////////

@mixin media( $type ){
	@if $type == huge-up {
		@media only screen and (min-width: $huge+1) { @content; }
	}
	@if $type == huge-down {
		@media only screen and (max-width: $huge) { @content; }
	}

	@if $type == extra-large-up {
		@media only screen and (min-width: $extra_large+1) { @content; }
	}
	@if $type == extra-large-down {
		@media only screen and (max-width: $extra_large) { @content; }
	}

	@if $type == large-up {
		@media only screen and (min-width: $large+1) { @content; }
	}
	@if $type == large-down {
		@media only screen and (max-width: $large) { @content; }
	}
	@if $type == midlarge-up {
		@media only screen and (min-width: $midlarge+1) { @content; }
	}
	@if $type == midlarge-down {
		@media only screen and (max-width: $midlarge) { @content; }
	}

	@if $type == medium-up {
		@media only screen and (min-width: $medium+1) { @content; }
	}
	@if $type == medium-down {
		@media only screen and (max-width: $medium) { @content; }
	}

	@if $type == tablet-up {
		@media only screen and (min-width: $tablet+1) { @content; }
	}
	@if $type == tablet-down {
		@media only screen and (max-width: $tablet) { @content; }
	}

	@if $type == small-up {
		@media only screen and (min-width: $small+1) { @content; }
	}
	@if $type == small-down {
		@media only screen and (max-width: $small) { @content; }
	}

	@if $type == phablet-up {
		@media only screen and (min-width: $phablet+1) { @content; }
	}
	@if $type == phablet-down {
		@media only screen and (max-width: $phablet) { @content; }
	}

	@if $type == extra-small-up {
		@media only screen and (min-width: $extra_small+1) { @content; }
	}
	@if $type == extra-small-down {
		@media only screen and (max-width: $extra_small) { @content; }
	}
}
